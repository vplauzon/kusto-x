parameters:
  environment:  ''
  tag:  ''
jobs:
  - deployment:  'tag_in_${{ parameters.environment }}'
    displayName: 'Tag Container in ${{ parameters.environment }}'
    pool:
      vmImage: 'ubuntu-latest'
    environment:  ${{ parameters.environment }}
    variables: []
    strategy:
      runOnce:
        deploy:
          steps:
          # Don't checkout repo:  https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/azure-repos-git#checkout
          - checkout: none
          # Bash script:  https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/bash?view=azure-devops
          - task: Bash@3
            displayName:  Retrieve full version
            inputs:
              targetType: Inline
              script:  |
                fullVersionPath=$(Pipeline.Workspace)/package/full-version.txt
                fullVersion=$(cat $fullVersionPath)
                echo "Full Version:  '$fullVersion'"
                echo "##vso[task.setvariable variable=full-version;]$fullVersion"
          # Build Docker:  https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/docker#build-and-push
          - task: Docker@2
            displayName: "Docker Image:  Pull"
            inputs:
              containerRegistry:  docker-hub
              command:  pull
              arguments:  ${{ parameters.imageName }}:$(full-version)
          # Build Docker:  https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/docker#build-and-push
          - task: Docker@2
            displayName: "Docker Image:  Tag"
            inputs:
              containerRegistry:  docker-hub
              command:  tag
              arguments:  ${{ parameters.imageName }}:$(full-version) ${{ parameters.imageName }}:${{ parameters.tag }}
          - script:  echo ${{ parameters.imageName }}:${{ parameters.tag }}
          # Build Docker:  https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/docker#build-and-push
          - task: Docker@2
            displayName: "Docker Image:  Push"
            inputs:
              containerRegistry:  docker-hub
              command:  push
              arguments:  ${{ parameters.imageName }}:${{ parameters.tag }}
