
#	Property rules
rule propertyValue = boolean:boolean | integer:integer | string:quotedString;
rule propertyAssignation = id:identifier "=" value:propertyValue => merge({"id" : id}, value);
rule propertyAssignationList = head:propertyAssignation
	tail:("," pa:propertyAssignation => pa)* => prepend(head, tail);
rule withPropertyAssignationList = "with" "(" list:propertyAssignationList? ")" => flatten(list);
rule optionalWithPropertyAssignationList = withPropertyAssignationList? => flatten(defaultOutput);

#	Commands and queries:  stuff that can be run
rule(interleave=false) kqlLine = ((. - "\n")* - blockSpacer*) "\n"=> text;
rule(interleave=false) query = (. - ".") kqlLine* => { "code": text };
rule(interleave=false) command = "." kqlLine+ => { "code": text };

#	Capturables:  stuff that can be captured, i.e. runnables & control flows
rule forEach = "@foreach" "(" cursor:identifier "in" enumerator:identifier ")"
	properties:optionalWithPropertyAssignationList sequence:sequenceContent => {
	"code":text,
	"properties":properties,
	"cursor":cursor,
	"enumerator":enumerator,
	"sequence":sequence
};
rule capturable = forEach:forEach | query:query | command:command;
rule captureScalar = "@capture-scalar" id:identifier "="
	capturable:capturable => merge({
		"capture":{
			"captureName":id,
			"isScalarCapture":true
		}
	}, capturable);
rule captureTable = "@capture" id:identifier "=" capturable:capturable =>
	merge({
		"capture":{
			"captureName":id,
			"isScalarCapture":false
		}
	}, capturable);
rule sequenceItem = captureScalar | captureTable
   | capturable => merge(defaultOutput, {"code": text});
rule sequenceItemList = head:sequenceItem
	tail:sequenceItem* => prepend(head, tail);
rule sequenceContent = "{" sequenceItems:sequenceItemList? "}"
	=> {
		"blocks":  flatten(sequenceItems),
		"code":  text
	};
rule controlFlow = "." "run-procedure" "<|"
	properties:optionalWithPropertyAssignationList
	rootSequence:sequenceContent => {
		"rootSequence":rootSequence
	};

#	main rule
rule main = controlFlow;