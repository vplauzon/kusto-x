#	Comments & interleaves
rule(interleave=false) comment = "//" (. - ("\r" | "\n"))*;
rule(interleave=false) blockSpacer = " " | "\t" | "\r";
rule(interleave=false) padding = blockSpacer | "\n" | comment;
interleave = padding;

#	tokens
rule(interleave=false) identifier = ("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9")* => text;
rule(interleave=false) number = ("0".."9")+;
rule(interleave=false) double = "-"? number* ("." number+)?;
rule(interleave=false) character = normal:(. - ("\"" | "\r" | "\n" | "\\"))
	| escapeQuote:("\\" "\"") | escapeBackslash:"\\\\"
	| escapeLetter:("\\" l:("n" | "r" | "t" | "v"))
	| escapeHexa:("\\x" h:("0".."9" | "a".."f" | "A".."F"){1,2});
rule(interleave=false) singleQuotableString = ((. - "'") | "\\'")* => text;
rule(interleave=false) doubleQuotableString = ((. - '"') | '\\"')* => text;
rule(interleave=false) singleQuotedString = "'" quotedString:singleQuotableString "'" => quotedString;
rule(interleave=false) doubleQuotedString = '"' quotedString:doubleQuotableString '"' => quotedString;
rule(interleave=false) quotedString = doubleQuotedString | singleQuotedString;
rule(interleave=false) integer = number+ => integer(text);
rule(interleave=false) boolean = "true" | "false" => boolean(text);

#	Property rules
rule propertyValue = boolean:boolean | integer:integer | string:quotedString;
rule propertyAssignation = id:identifier "=" value:propertyValue => merge({"id" : id}, value);
rule propertyAssignationList = head:propertyAssignation
	tail:("," pa:propertyAssignation => pa)* => prepend(head, tail);
rule withPropertyAssignationList = "with" "(" list:propertyAssignationList? ")" => flatten(list);
rule optionalWithPropertyAssignationList = withPropertyAssignationList? => flatten(defaultOutput);

#	Capturables:  stuff that can be captured, i.e. runnables & control flows
rule forEach = "@foreach" "(" cursor:identifier "in" enumerator:identifier ")"
	properties:optionalWithPropertyAssignationList sequence:sequenceContent => {
	"code":text,
	"properties":properties,
	"cursor":cursor,
	"enumerator":enumerator,
	"sequence":sequence
};
rule if = "@if" condition:identifier thenSequence:sequenceContent
	else:("@else" elseSequence:sequenceContent => elseSequence)? => {
		"code":text,
		"condition" : condition,
		"thenSequence" : thenSequence,
		"elseSequence" : firstOrNull(else)
	};
rule capturable = forEach:forEach | if:if | query:genericQuery | command:command;
rule captureScalar = "@capture-scalar" id:identifier "="
	capturable:capturable => merge({
		"capture":{
			"captureName":id,
			"isScalarCapture":true
		}
	}, capturable);
rule captureTable = "@capture" id:identifier "=" capturable:capturable =>
	merge({
		"capture":{
			"captureName":id,
			"isScalarCapture":false
		}
	}, capturable);
rule sequenceItem = captureScalar | captureTable
   | capturable => merge(defaultOutput, {"code": text});
rule sequenceItemList = head:sequenceItem tail:sequenceItem*
	=> prepend(head, tail);
rule sequenceContent = "{" sequenceItems:sequenceItemList? "}"
	=> {
		"blocks":  flatten(sequenceItems),
		"code":  text
	};

#	Commands and queries:  stuff that can be run
rule integerList = head:integer tail:("," i:integer => i)* => prepend(head, tail);
rule(interleave=false) genericKqlLine = (. - "\n")+ - blockSpacer* => text;
rule(interleave=false) genericKqlBlock = content:((genericKqlLine "\n")* genericKqlLine => text)
	doubleReturn:("\n" blockSpacer* "\n")
	=> content;
rule listBlobsCommand = "." "list" "blobs" rootUrl:quotedString => {'rootUrl':rootUrl};
rule queueIngestCommand = "." "queue" "ingest"=> "QueueIngest";
rule(interleave=false) genericQuery = prefix:(. - ".") block:genericKqlBlock => {
	"code": concat(prefix, block)
};
rule pipeGenericQuery = "|" q:genericQuery => q;
rule genericCommand = "." genericKqlBlock => { "code": text };
rule runProcedureCommand = "." "run" ("procedure" | "proc") "<|"
	properties:optionalWithPropertyAssignationList
	rootSequence:sequenceContent => {
		"rootSequence":rootSequence
	};
rule appendCommand = "." "append" tableName:identifier
	properties:optionalWithPropertyAssignationList
	"<|"
	query:genericQuery;
rule deleteCommand = "." "delete" "table" tableName:identifier "records" 
	"<|" query:genericQuery;

rule command = appendCommand:appendCommand
	| deleteCommand:deleteCommand
	| runProcedureCommand:runProcedureCommand
	| showProcedureRuns:showProcedureRunsFamily
	| listBlobsCommand:listBlobsCommand
	| queueIngestCommand:queueIngestCommand
	| genericCommand:genericCommand;

#	Show procedure runs family
rule showProcedureRunsPrefix = "." "show" ("procedure" | "proc") "runs"; 
rule showProcedureRuns = showProcedureRunsPrefix jobId:quotedString?
	query:pipeGenericQuery? => {
		"code" : text,
		"jobId" : firstOrNull(jobId),
		"query" : firstOrNull(query)
	};
rule showProcedureRunsOptions = showProcedureRunsPrefix jobId:quotedString
	option:(("result" => { "isResult":true}) | ("history" => {"isHistory":true}) )
	query:pipeGenericQuery? => merge({
		"code" : text,
		"jobId" : jobId,
		"query" : firstOrNull(query)
	}, option);
rule showProcedureRunsSteps = showProcedureRunsPrefix  jobId:quotedString "steps"
	breadcrumb:("[" breadcrumb:integerList "]"
	options:(("children" => {"isChildren":true})
	| ("result" => {"isResult":true})
	| ("history" => {"isHistory":true}) )? =>
	merge({"breadcrumb":breadcrumb}, firstOrNull(options)))?
	query:pipeGenericQuery? => merge({
		"code" : text,
		"jobId" : jobId,
		"isSteps" : true,
		"query" : firstOrNull(query)
	}, firstOrNull(breadcrumb));
rule showProcedureRunsFamily = showProcedureRuns | showProcedureRunsOptions | showProcedureRunsSteps;

#	main rule
rule main = content:(query:genericQuery | command:command) padding* => content;